// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fo_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace pixelatedgames {
namespace fos {
namespace protobufs {

void protobuf_ShutdownFile_fo_5fmsgs_2eproto() {
  delete fo_msg::default_instance_;
  delete ping::default_instance_;
  delete gen::default_instance_;
}

void protobuf_AddDesc_fo_5fmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  fo_msg::default_instance_ = new fo_msg();
  ping::default_instance_ = new ping();
  gen::default_instance_ = new gen();
  fo_msg::default_instance_->InitAsDefaultInstance();
  ping::default_instance_->InitAsDefaultInstance();
  gen::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fo_5fmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fo_5fmsgs_2eproto {
  StaticDescriptorInitializer_fo_5fmsgs_2eproto() {
    protobuf_AddDesc_fo_5fmsgs_2eproto();
  }
} static_descriptor_initializer_fo_5fmsgs_2eproto_;

bool msg_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int fo_msg::kTypeFieldNumber;
const int fo_msg::kPingFieldNumber;
const int fo_msg::kGenFieldNumber;
#endif  // !_MSC_VER

fo_msg::fo_msg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fo_msg::InitAsDefaultInstance() {
  _ping_ = const_cast< ::com::pixelatedgames::fos::protobufs::ping*>(&::com::pixelatedgames::fos::protobufs::ping::default_instance());
  _gen_ = const_cast< ::com::pixelatedgames::fos::protobufs::gen*>(&::com::pixelatedgames::fos::protobufs::gen::default_instance());
}

fo_msg::fo_msg(const fo_msg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fo_msg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  _ping_ = NULL;
  _gen_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fo_msg::~fo_msg() {
  SharedDtor();
}

void fo_msg::SharedDtor() {
  if (this != default_instance_) {
    delete _ping_;
    delete _gen_;
  }
}

void fo_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fo_msg& fo_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fo_5fmsgs_2eproto();  return *default_instance_;
}

fo_msg* fo_msg::default_instance_ = NULL;

fo_msg* fo_msg::New() const {
  return new fo_msg;
}

void fo_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has__ping()) {
      if (_ping_ != NULL) _ping_->::com::pixelatedgames::fos::protobufs::ping::Clear();
    }
    if (has__gen()) {
      if (_gen_ != NULL) _gen_->::com::pixelatedgames::fos::protobufs::gen::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fo_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.pixelatedgames.fos.protobufs.msg_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::pixelatedgames::fos::protobufs::msg_type_IsValid(value)) {
            set_type(static_cast< com::pixelatedgames::fos::protobufs::msg_type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__ping;
        break;
      }
      
      // optional .com.pixelatedgames.fos.protobufs.ping _ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__gen;
        break;
      }
      
      // optional .com.pixelatedgames.fos.protobufs.gen _gen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__gen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__gen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fo_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.pixelatedgames.fos.protobufs.msg_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .com.pixelatedgames.fos.protobufs.ping _ping = 2;
  if (has__ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_ping(), output);
  }
  
  // optional .com.pixelatedgames.fos.protobufs.gen _gen = 3;
  if (has__gen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_gen(), output);
  }
  
}

int fo_msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.pixelatedgames.fos.protobufs.msg_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .com.pixelatedgames.fos.protobufs.ping _ping = 2;
    if (has__ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ping());
    }
    
    // optional .com.pixelatedgames.fos.protobufs.gen _gen = 3;
    if (has__gen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_gen());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fo_msg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fo_msg*>(&from));
}

void fo_msg::MergeFrom(const fo_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__ping()) {
      mutable__ping()->::com::pixelatedgames::fos::protobufs::ping::MergeFrom(from._ping());
    }
    if (from.has__gen()) {
      mutable__gen()->::com::pixelatedgames::fos::protobufs::gen::MergeFrom(from._gen());
    }
  }
}

void fo_msg::CopyFrom(const fo_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fo_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__ping()) {
    if (!this->_ping().IsInitialized()) return false;
  }
  return true;
}

void fo_msg::Swap(fo_msg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_ping_, other->_ping_);
    std::swap(_gen_, other->_gen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fo_msg::GetTypeName() const {
  return "com.pixelatedgames.fos.protobufs.fo_msg";
}


// ===================================================================

#ifndef _MSC_VER
const int ping::kTimestampFieldNumber;
#endif  // !_MSC_VER

ping::ping()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ping::InitAsDefaultInstance() {
}

ping::ping(const ping& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ping::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ping::~ping() {
  SharedDtor();
}

void ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ping& ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fo_5fmsgs_2eproto();  return *default_instance_;
}

ping* ping::default_instance_ = NULL;

ping* ping::New() const {
  return new ping;
}

void ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }
  
}

int ping::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ping::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ping*>(&from));
}

void ping::MergeFrom(const ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void ping::CopyFrom(const ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ping::Swap(ping* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ping::GetTypeName() const {
  return "com.pixelatedgames.fos.protobufs.ping";
}


// ===================================================================

#ifndef _MSC_VER
const int gen::kNumsFieldNumber;
const int gen::kStrsFieldNumber;
#endif  // !_MSC_VER

gen::gen()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void gen::InitAsDefaultInstance() {
}

gen::gen(const gen& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void gen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gen::~gen() {
  SharedDtor();
}

void gen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const gen& gen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fo_5fmsgs_2eproto();  return *default_instance_;
}

gen* gen::default_instance_ = NULL;

gen* gen::New() const {
  return new gen;
}

void gen::Clear() {
  nums_.Clear();
  strs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool gen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 nums = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_nums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strs;
        break;
      }
      
      // repeated string strs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 nums = 1 [packed = true];
  if (this->nums_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nums_cached_byte_size_);
  }
  for (int i = 0; i < this->nums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->nums(i), output);
  }
  
  // repeated string strs = 2;
  for (int i = 0; i < this->strs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strs(i), output);
  }
  
}

int gen::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 nums = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nums(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _nums_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated string strs = 2;
  total_size += 1 * this->strs_size();
  for (int i = 0; i < this->strs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strs(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const gen*>(&from));
}

void gen::MergeFrom(const gen& from) {
  GOOGLE_CHECK_NE(&from, this);
  nums_.MergeFrom(from.nums_);
  strs_.MergeFrom(from.strs_);
}

void gen::CopyFrom(const gen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gen::IsInitialized() const {
  
  return true;
}

void gen::Swap(gen* other) {
  if (other != this) {
    nums_.Swap(&other->nums_);
    strs_.Swap(&other->strs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string gen::GetTypeName() const {
  return "com.pixelatedgames.fos.protobufs.gen";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobufs
}  // namespace fos
}  // namespace pixelatedgames
}  // namespace com

// @@protoc_insertion_point(global_scope)
