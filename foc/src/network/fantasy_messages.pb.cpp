// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fantasy_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace pixelatedgames {
namespace fos {
namespace protobufs {

void protobuf_ShutdownFile_fantasy_5fmessages_2eproto() {
  delete fantasy_message::default_instance_;
  delete login::default_instance_;
}

void protobuf_AddDesc_fantasy_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  fantasy_message::default_instance_ = new fantasy_message();
  login::default_instance_ = new login();
  fantasy_message::default_instance_->InitAsDefaultInstance();
  login::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fantasy_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fantasy_5fmessages_2eproto {
  StaticDescriptorInitializer_fantasy_5fmessages_2eproto() {
    protobuf_AddDesc_fantasy_5fmessages_2eproto();
  }
} static_descriptor_initializer_fantasy_5fmessages_2eproto_;

bool fantasy_message_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int fantasy_message::kTypeFieldNumber;
const int fantasy_message::kLoginFieldNumber;
#endif  // !_MSC_VER

fantasy_message::fantasy_message()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void fantasy_message::InitAsDefaultInstance() {
  _login_ = const_cast< ::com::pixelatedgames::fos::protobufs::login*>(&::com::pixelatedgames::fos::protobufs::login::default_instance());
}

fantasy_message::fantasy_message(const fantasy_message& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void fantasy_message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  _login_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fantasy_message::~fantasy_message() {
  SharedDtor();
}

void fantasy_message::SharedDtor() {
  if (this != default_instance_) {
    delete _login_;
  }
}

void fantasy_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fantasy_message& fantasy_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fantasy_5fmessages_2eproto();  return *default_instance_;
}

fantasy_message* fantasy_message::default_instance_ = NULL;

fantasy_message* fantasy_message::New() const {
  return new fantasy_message;
}

void fantasy_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has__login()) {
      if (_login_ != NULL) _login_->::com::pixelatedgames::fos::protobufs::login::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool fantasy_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.pixelatedgames.fos.protobufs.fantasy_message_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::pixelatedgames::fos::protobufs::fantasy_message_type_IsValid(value)) {
            set_type(static_cast< com::pixelatedgames::fos::protobufs::fantasy_message_type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__login;
        break;
      }
      
      // optional .com.pixelatedgames.fos.protobufs.login _login = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fantasy_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.pixelatedgames.fos.protobufs.fantasy_message_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .com.pixelatedgames.fos.protobufs.login _login = 2;
  if (has__login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_login(), output);
  }
  
}

int fantasy_message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.pixelatedgames.fos.protobufs.fantasy_message_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .com.pixelatedgames.fos.protobufs.login _login = 2;
    if (has__login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_login());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fantasy_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fantasy_message*>(&from));
}

void fantasy_message::MergeFrom(const fantasy_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__login()) {
      mutable__login()->::com::pixelatedgames::fos::protobufs::login::MergeFrom(from._login());
    }
  }
}

void fantasy_message::CopyFrom(const fantasy_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fantasy_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__login()) {
    if (!this->_login().IsInitialized()) return false;
  }
  return true;
}

void fantasy_message::Swap(fantasy_message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_login_, other->_login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string fantasy_message::GetTypeName() const {
  return "com.pixelatedgames.fos.protobufs.fantasy_message";
}


// ===================================================================

#ifndef _MSC_VER
const int login::kAuthenticationFieldNumber;
#endif  // !_MSC_VER

login::login()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void login::InitAsDefaultInstance() {
}

login::login(const login& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void login::SharedCtor() {
  _cached_size_ = 0;
  authentication_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login::~login() {
  SharedDtor();
}

void login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const login& login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fantasy_5fmessages_2eproto();  return *default_instance_;
}

login* login::default_instance_ = NULL;

login* login::New() const {
  return new login;
}

void login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    authentication_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 authentication = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &authentication_)));
          set_has_authentication();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 authentication = 2;
  if (has_authentication()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->authentication(), output);
  }
  
}

int login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 authentication = 2;
    if (has_authentication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->authentication());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const login*>(&from));
}

void login::MergeFrom(const login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authentication()) {
      set_authentication(from.authentication());
    }
  }
}

void login::CopyFrom(const login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void login::Swap(login* other) {
  if (other != this) {
    std::swap(authentication_, other->authentication_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string login::GetTypeName() const {
  return "com.pixelatedgames.fos.protobufs.login";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobufs
}  // namespace fos
}  // namespace pixelatedgames
}  // namespace com

// @@protoc_insertion_point(global_scope)
